#################################
#snakefile for implementing PacBio variant calling pipeline
#Cihan Oguz, cihan.oguz@nih.gov
#NIAID Collaborative Bioinformatics Resource (NCBR)
#July 19, 2019
################################
################################

DATA_SAMPLES = ["bc1016", "bc1070"]
data_path="/data/NCBR/rawdata/NCBR-56/"
refs_path="/data/NCBR/references/p_falciparium_3D7/merged/"
ref_fasta = refs_path+"reference.fa"
gff_file = refs_path+"transcriptome.gff3.gz"
gene_symbols=refs_path+"geneSymbols.bed.gz"
gene_descriptions=refs_path+"geneDescriptions.bed.gz"


rule all:
    input:
        expand("raw_subreads/{samples}.raw.fastq", samples=DATA_SAMPLES),
        expand("nanoplot_raw/{samples}/{samples}_HistogramReadlength_mqc.png",samples=DATA_SAMPLES),
        expand("raw_fastqc/{samples}.raw_fastqc.html",samples=DATA_SAMPLES),
        expand("ccs_reads/{samples}.ccs.report.txt",samples=DATA_SAMPLES),
        expand("ccs_reads/{samples}.ccs.bam",samples=DATA_SAMPLES),
        expand("ccs_reads/{samples}.ccs.fastq",samples=DATA_SAMPLES),
        expand("nanoplot_ccs/{samples}/{samples}_LengthvsQualityScatterPlot_mqc.png",samples=DATA_SAMPLES),
        expand("ccs_fastqc/{samples}.ccs_fastqc.html",samples=DATA_SAMPLES),
        expand("{samples}.realign.bam",samples=DATA_SAMPLES),
        expand("qualimap/{samples}_ccs/qualimapReport.html",samples=DATA_SAMPLES),
        expand("qualimap/{samples}_raw/qualimapReport.html",samples=DATA_SAMPLES),
        expand("{samples}.flagstat",samples=DATA_SAMPLES),
        expand("{samples}.picardMetrics.quality_distribution.pdf",samples=DATA_SAMPLES),
        expand("{samples}.stats.txt",samples=DATA_SAMPLES),
        expand("{samples}.gvcf",samples=DATA_SAMPLES),
        expand("{samples}.calls.bam",samples=DATA_SAMPLES),
        expand("sample_vcfs/{samples}.vcf",samples=DATA_SAMPLES),
        expand("joint_vcfs/sample_vcfs/{samples}.joint.vcf",samples=DATA_SAMPLES),
        "joint_vcfs/joint_filtered.table",
        "pbsv/raw/joint.sv.vcf",
        "pbsv/ccs/joint.sv.vcf",
        "pbsv/raw/joint.sv.annotated.tsv"
    params: rname="final"
    output: "multiqc_report.html"
    shell: """module load multiqc/1.7; multiqc ."""


rule gener_raw_subreads:
    input:
        data_path+"raw_reads/{samples}.bam"
    output:
        "raw_subreads/{samples}.raw.fastq",
    params: rname="subreads"
    shell:
        """mkdir -p raw_subreads
        module load samtools
        samtools fastq {input} > {output}"""

rule nano_raw_subreads_1:
    input:
        "raw_subreads/{samples}.raw.fastq"
    output:
        "nanoplot_raw/{samples}/{samples}"+"HistogramReadlength.pdf"
    params:
        sample="{samples}",rname="nanoRaw"
    shell:
        """source /data/NCBR/rawdata/NCBR-56/ccs_bams/conda/etc/profile.d/conda.sh
        conda activate base
        mkdir -p nanoplot_raw
        mkdir -p nanoplot_raw/{params.sample}
        NanoPlot -t 12 -o nanoplot_raw/{params.sample} --prefix {params.sample} --maxlength 21000 --minlength 10 -f pdf --fastq {input}"""

rule nano_raw_subreads_2:
    input:
        "nanoplot_raw/{samples}/{samples}"+"HistogramReadlength.pdf"
    output:
        "nanoplot_raw/{samples}/{samples}_HistogramReadlength_mqc.png"
    params:
        sample="{samples}",rname="nanoPlot"
    shell:
        """module load R
        Rscript /data/NCBR/apps/pdf2png.R {input} {output}"""

##fastqc on raw subreads
rule fastqc_raw_subreads:
    input:
        "raw_subreads/{samples}.raw.fastq"
    output:
        "raw_fastqc/{samples}.raw_fastqc.html"
    params: rname="fastqcRaw"
    shell:
        """module load fastqc
        mkdir -p raw_fastqc
        fastqc -o raw_fastqc -f fastq --threads 12 --extract {input}"""

rule generate_ccs_reads:
    input:
        data_path+"raw_reads/{samples}.bam"
    output:
        report="ccs_reads/{samples}.ccs.report.txt",
        bam="ccs_reads/{samples}.ccs.bam"
    params: rname="makeCCS"
    shell:
        """source /data/NCBR/rawdata/NCBR-56/ccs_bams/conda/etc/profile.d/conda.sh
        conda activate base
        mkdir -p ccs_reads
        ccs --minPredictedAccuracy 0.99 -j 32 --reportFile {output.report} {input} {output.bam}"""

rule fastq_ccs_reads:
    input:
        "ccs_reads/{samples}.ccs.bam"
    output:
        "ccs_reads/{samples}.ccs.fastq"
    params: rname="fastqcCCS"
    shell:
        """module load samtools
        mkdir -p ccs_reads
        samtools fastq {input} > {output}"""


##rule 7
rule nano_ccs_reads_1:
    input:
        "ccs_reads/{samples}.ccs.fastq"
    output:
        "nanoplot_ccs/{samples}/{samples}LengthvsQualityScatterPlot_dot.pdf"
    params:
        sample="{samples}",rname="nanoCCS"
    shell:
        """source /data/NCBR/rawdata/NCBR-56/ccs_bams/conda/etc/profile.d/conda.sh
        conda activate base
        mkdir -p nanoplot_ccs
        mkdir -p nanoplot_ccs/{params.sample}
        NanoPlot -t 12 -o nanoplot_ccs/{params.sample} --prefix {params.sample} --maxlength 21000 --minlength 10 -f pdf --fastq {input}
        """

#rule 8
rule nano_ccs_reads_2:
    input:
        "nanoplot_ccs/{samples}/{samples}LengthvsQualityScatterPlot_dot.pdf"
    output:
        "nanoplot_ccs/{samples}/{samples}_LengthvsQualityScatterPlot_mqc.png"
    params:
        sample="{samples}",rname="nanoPlot"
    shell:
        """module load R
        Rscript /data/NCBR/apps/pdf2png.R {input} {output}"""


##fastqc on ccs reads
#rule 9
rule fastqc_ccs_reads:
    input:
        "ccs_reads/{samples}.ccs.fastq"
    output:
        "ccs_fastqc/{samples}.ccs_fastqc.html"
    params: rname="fastqcCCS"
    shell:
        """module load fastqc
        mkdir -p ccs_fastqc
        fastqc -o ccs_fastqc -f fastq --threads 8 --extract {input}"""



##ccs read reference alignment
#rule 10
rule ccs_read_ref_align:
    input:
        "ccs_reads/{samples}.ccs.fastq"
    output:
        "{samples}.sort.bam"
    params:
        ref = ref_fasta,rname="pbmm2"
    shell:
        """source /data/NCBR/rawdata/NCBR-56/ccs_bams/conda/etc/profile.d/conda.sh
        conda activate base
        pbmm2 align {params.ref} {input} {output} --preset CCS --sort -j 12"""

# ##Add read groups to alignment BAM file
# #rule 11
rule ccs_readgroup_to_align_bam_1:
    input:
        "{samples}.sort.bam"
    output:
        bai="{samples}.sort.bam.bai",
        rehead_bam="{samples}.sort.rehead.bam"
    params:
        sample="{samples}",rname="addReadGroup"
    shell:
        """module load samtools
        samtools index {input}
        module load picard
        java -Xmx24g -jar $PICARDJARPATH/picard.jar AddOrReplaceReadGroups I={input} O={output.rehead_bam} Validation_Stringency=LENIENT RGID=1 RGLB={params.sample} RGPL=Sequel RGPU=AAAAAA RGSM={params.sample}
#         """
#
#
# #rule 12
rule ccs_readgroup_to_align_bam_2:
    input:
        "{samples}.sort.rehead.bam"
    output:
        "{samples}.sort.rehead.bam.bai",
    params:
        sample="{samples}",rname="indexBAM"
    shell:
        """module load samtools
        samtools index {input}"""

rule realign:
    input:
        bam="{samples}.sort.rehead.bam",
        index="{samples}.sort.rehead.bam.bai"
    output:
        bam="{samples}.realign.bam",
        int="{samples}.intervals",
    params:
        sample="{samples}",ref = ref_fasta,rname="realign"
    shell:
        """
        module load GATK/3.8-0
        java -Xmx48g -jar $GATK_JAR -T RealignerTargetCreator -I {input.bam} -R {params.ref} -o {output.int} -allowPotentiallyMisencodedQuals
        java -Xmx48g -jar $GATK_JAR -T IndelRealigner -R {params.ref} -I {input.bam} --use_jdk_inflater --use_jdk_deflater -targetIntervals {output.int} -o {output.bam} -allowPotentiallyMisencodedQuals
        """

rule bam_recal:
    input:
        bam="{samples}.realign.bam",
    output:
        bam="{samples}.recal.bam",
        re="{samples}.recal.txt",
    params:
        sample="{samples}",ref = ref_fasta,rname="recal"
    shell:
        """
        module load GATK/4.1.3.0
        gatk BaseRecalibrator -I {input} -R {params.genome} {params.knowns} -O {output.re}
        gatk ApplyBQSR -R {params.genome} -I {input} --bqsr-recal-file {output.re} -o {output.bam}
        """

###Qualimap QC on BAM file
rule qualimap_ccs:
    input:
        "{samples}.realign.bam",
    output:
        "qualimap/{samples}_ccs/qualimapReport.html"
    params:
        sample="{samples}",rname="qualimap"
    shell:
        """mkdir -p qualimap
        mkdir -p qualimap/{params.sample}_ccs
        module load qualimap/2.2.1
        unset DISPLAY
        qualimap bamqc --java-mem-size=48G -bam {input} -c -outdir qualimap/{params.sample}_ccs -nt 12 -outformat HTML -nw 500 -outfile {output}"""
#
#rule 14
##samtools flagstats
rule samtools_flagstats:
    input:
        "{samples}.sort.rehead.bam"
    output:
        "{samples}.flagstat"
    params: rname="flagstats"
    shell:
        """module load samtools
        samtools flagstat {input} > {output}"""


#rule 15
##Picard BAM Metrics
rule picard_bam_metrics:
    input:
        "{samples}.sort.rehead.bam"
    output:
        "{samples}.picardMetrics.quality_distribution.pdf"
    params: ref = ref_fasta,sample="{samples}",rname="BAMmetrics"
    shell:
        """module load picard
        java -Xmx24g -jar $PICARDJARPATH/picard.jar CollectMultipleMetrics R={params.ref} I={input} O={params.sample}.picardMetrics PROGRAM=CollectAlignmentSummaryMetrics PROGRAM=QualityScoreDistribution PROGRAM=MeanQualityByCycle PROGRAM=CollectBaseDistributionByCycle PROGRAM=CollectGcBiasMetrics PROGRAM=CollectSequencingArtifactMetrics PROGRAM=CollectQualityYieldMetrics"""

#rule 16
##samtools stats on BAM files
rule samtools_stats_on_bam_files:
    input:
        "{samples}.sort.rehead.bam"
    output:
        "{samples}.stats.txt"
    params:
        ref = ref_fasta,rname="BAMstats"
    shell:
        """module load samtools
        samtools stats --ref-seq {params.ref} {input} > {output}"""


#rule 17
##Generating gVCFs/HaplotypeCaller
rule gvcf_haplo:
    input:
        "{samples}.realign.bam"
    output:
        gvcf="{samples}.gvcf",
        calls_bam="{samples}.calls.bam"
    params:
        ref = ref_fasta,rname="haploGVCFs"
    shell:
        """module load GATK/4.1.3.0
        gatk HaplotypeCaller -R {params.ref} -I {input} -O {output.gvcf} --ploidy 1 --pcr-indel-model AGGRESSIVE -bamout {output.calls_bam} -ERC GVCF --minimum-mapping-quality 60 --annotation-group AS_StandardAnnotation --annotation-group StandardAnnotation"""

##joint HaplotypeCaller
rule joint_haplo:
    input: expand("{samples}.realign.bam",samples=DATA_SAMPLES)
    output:
        vcf="joint_vcfs/joint_raw.vcf",
    params:
        ref = ref_fasta,rname="haploJoint"
    run:
        fl=os.popen("ls *.realign.bam").read().split()      
        var=" -I "+" -I ".join(fl)
        cmd="mkdir -p joint_vcfs; module load GATK/4.1.3.0; gatk HaplotypeCaller -R {params.ref} -O {output.vcf} --ploidy 1 --pcr-indel-model AGGRESSIVE --minimum-mapping-quality 60 --annotation-group StandardAnnotation"+var
        print(cmd)
        shell(cmd)

##Combining gVCFs
rule combo_gvcfs:
    input: expand("{samples}.gvcf",samples=DATA_SAMPLES)
    output:
        gvcf="merged.gvcf",
    params:
        ref = ref_fasta,rname="mergeGVCFs"
    run:
        fl=os.popen("ls *.gvcf").read().split()
        var=" --variant "+" --variant ".join(fl)
        cmd="module load GATK/4.1.3.0; gatk CombineGVCFs -R {params.ref} -O {output.gvcf} --annotation-group AS_StandardAnnotation --annotation-group StandardAnnotation"+var
        print(cmd)
        shell(cmd)

##Genotype gVCFs
rule genotyping:
    input: gvcf="merged.gvcf",
    output:
        vcf="raw_variants.vcf",
    params:
        ref = ref_fasta,rname="genoGVCFs"
    run:
        cmd="module load GATK/4.1.3.0; gatk GenotypeGVCFs -R {params.ref} -V {input.gvcf} -O {output.vcf} --annotation-group AS_StandardAnnotation --annotation-group StandardAnnotation"
        print(cmd)
        shell(cmd)

##Filter VCFs
rule filter:
    input: vcf="raw_variants.vcf",
    output:
        snps="snps.vcf",
        shortindels="1bpindels.vcf",
        indels="indels.vcf",
        flagsnps="snps.flagged.vcf",
        flagshort="1bpindels.flagged.vcf",
        flagindels="indels.flagged.vcf",
        flagmerged="merged.flagged.vcf",
        filtered="filtered.vcf",
        bcftoolsraw="raw.bcftools",
        bcftools="filtered.bcftools",
        vep="filtered.vep",
    params:
        ref = ref_fasta,gff=gff_file,ids=gene_symbols,desc=gene_descriptions,rname="filterVCF"
    shell:
        """
        module load GATK/4.1.3.0
        gatk SelectVariants -R {params.ref} --variant {input.vcf} -O {output.snps} --select-type-to-include SNP --exclude-filtered
        gatk SelectVariants -R {params.ref} --variant {input.vcf} --select-type-to-include INDEL --exclude-filtered -O {output.shortindels} --max-indel-size 1 --min-indel-size 1
        gatk SelectVariants -R {params.ref} --variant {input.vcf} --select-type-to-include INDEL --exclude-filtered -O {output.indels} --min-indel-size 2
        gatk VariantFiltration -R {params.ref} --variant {output.snps} --filter-expression "AS_QD < 2.0" --filter-name "my_snp_filter" -O {output.flagsnps}
        gatk VariantFiltration -R {params.ref} --variant {output.shortindels} --filter-expression "AS_QD < 5.0" --filter-name "my_shortindel_filter" -O {output.flagshort}
        gatk VariantFiltration -R {params.ref} --variant {output.indels} --filter-expression "AS_QD < 2.0" --filter-name "my_indel_filter" -O {output.flagindels}
        gatk MergeVcfs -I={output.flagsnps} -I={output.flagshort} -I={output.flagindels} -O={output.flagmerged}
        gatk SelectVariants -R {params.ref} -V {output.flagmerged} --exclude-filtered -O {output.filtered}
        module load samtools
        bcftools stats -F {params.ref} {output.filtered} > {output.bcftools}
        bcftools stats -F {params.ref} {input.vcf} > {output.bcftoolsraw}
        module load VEP/96
        vep -sf filtered.vepstats.html --force_overwrite --fasta {params.ref} --gff {params.gff} --tab -i {output.filtered} --format vcf -o {output.vep} --pick --custom {params.ids},geneSymbol,bed,overlap,0 --custom {params.desc},geneDescription,bed,overlap,0
        """

##Filter joint VCFs
rule filter_joint:
    input: vcf="joint_vcfs/joint_raw.vcf",
    output:
        snps="joint_vcfs/snps.vcf",
        shortindels="joint_vcfs/1bpindels.vcf",
        indels="joint_vcfs/indels.vcf",
        flagsnps="joint_vcfs/snps.flagged.vcf",
        flagshort="joint_vcfs/1bpindels.flagged.vcf",
        flagindels="joint_vcfs/indels.flagged.vcf",
        flagmerged="joint_vcfs/merged.flagged.vcf",
        filtered="joint_vcfs/joint_filtered.vcf",
        bcftoolsraw="joint_vcfs/joint_raw.bcftools",
        bcftools="joint_vcfs/joint_filtered.bcftools",
        vep="joint_vcfs/joint_filtered.vep",
    params:
        ref = ref_fasta,gff=gff_file,ids=gene_symbols,desc=gene_descriptions,rname="filterJointVCF"
    shell:
        """
        module load GATK/4.1.3.0
        gatk SelectVariants -R {params.ref} --variant {input.vcf} -O {output.snps} --select-type-to-include SNP --exclude-filtered
        gatk SelectVariants -R {params.ref} --variant {input.vcf} --select-type-to-include INDEL --exclude-filtered -O {output.shortindels} --max-indel-size 1 --min-indel-size 1
        gatk SelectVariants -R {params.ref} --variant {input.vcf} --select-type-to-include INDEL --exclude-filtered -O {output.indels} --min-indel-size 2
        gatk VariantFiltration -R {params.ref} --variant {output.snps} --filter-expression "QD < 2.0" --filter-name "my_snp_filter" -O {output.flagsnps}
        gatk VariantFiltration -R {params.ref} --variant {output.shortindels} --filter-expression "QD < 5.0" --filter-name "my_shortindel_filter" -O {output.flagshort}
        gatk VariantFiltration -R {params.ref} --variant {output.indels} --filter-expression "QD < 2.0" --filter-name "my_indel_filter" -O {output.flagindels}
        gatk MergeVcfs -I={output.flagsnps} -I={output.flagshort} -I={output.flagindels} -O={output.flagmerged}
        gatk SelectVariants -R {params.ref} -V {output.flagmerged} --exclude-filtered -O {output.filtered}
        module load samtools
        bcftools stats -F {params.ref} {output.filtered} > {output.bcftools}
        bcftools stats -F {params.ref} {input.vcf} > {output.bcftoolsraw}
        module load VEP/96
        vep -sf joint_vcfs/joint_filtered.vepstats.html --force_overwrite --fasta {params.ref} --gff {params.gff} --tab -i {output.filtered} --format vcf -o {output.vep} --pick --custom {params.ids},geneSymbol,bed,overlap,0 --custom {params.desc},geneDescription,bed,overlap,0
        """

##Extract sample variants
rule extract_sample_variants:
    input:
        "filtered.vcf",
    output:
        vcf="sample_vcfs/{samples}.vcf",
        bcftools="sample_vcfs/{samples}.bcftools",
        vep="sample_vcfs/{samples}.vep",
    params:
        ref = ref_fasta,sample="{samples}",gff=gff_file,ids=gene_symbols,desc=gene_descriptions,rname="extractVar"
    shell:
        """
        mkdir -p sample_vcfs
        module load GATK/4.1.3.0
        gatk SelectVariants -R {params.ref} --variant {input} -O {output.vcf} -sn {params.sample} --exclude-non-variants
        module load samtools
        bcftools stats -F {params.ref} {output.vcf} > {output.bcftools}
        module load VEP/96
        vep -sf sample_vcfs/{params.sample}.vepstats.html --force_overwrite --fasta {params.ref} --gff {params.gff} --tab -i {input} --format vcf -o {output.vep} --pick --custom {params.ids},geneSymbol,bed,overlap,0 --custom {params.desc},geneDescription,bed,overlap,0"""

##Extract sample variants
rule extract_joint_sample_variants:
    input:
        "joint_vcfs/joint_filtered.vcf",
    output:
        vcf="joint_vcfs/sample_vcfs/{samples}.joint.vcf",
        bcftools="joint_vcfs/sample_vcfs/{samples}.joint.bcftools",
        vep="joint_vcfs/sample_vcfs/{samples}.vep",
    params:
        ref = ref_fasta,sample="{samples}",gff=gff_file,ids=gene_symbols,desc=gene_descriptions,rname="extractVar"
    shell:
        """
        mkdir -p joint_vcfs/sample_vcfs
        module load GATK/4.1.3.0
        gatk SelectVariants -R {params.ref} --variant {input} -O {output.vcf} -sn {params.sample} --exclude-non-variants
        module load samtools
        bcftools stats -F {params.ref} {output.vcf} > {output.bcftools}
        module load VEP/96
        vep -sf joint_vcfs/sample_vcfs/{params.sample}.vepstats.html --force_overwrite --fasta {params.ref} --gff {params.gff} --tab -i {input} --format vcf -o {output.vep} --pick --custom {params.ids},geneSymbol,bed,overlap,0 --custom {params.desc},geneDescription,bed,overlap,0"""

##Annotation
rule annotation:
    input:
        vcf="joint_vcfs/joint_filtered.vcf",
        vep="joint_vcfs/joint_filtered.vep",
    output:
        genotypes="joint_vcfs/joint_filtered.genotypes",
        table="joint_vcfs/joint_filtered.table",
        merged="joint_vcfs/merged_annotated_table.tsv"
    params:
        ref = ref_fasta,gff=gff_file,rname="annotate"
    shell:
        """
        module load samtools
        bcftools query -f '%CHROM\\t%POS\\t%REF\\t%ALT[\\t%GT]\\n' {input.vcf} > {output.genotypes}
        module load GATK/4.1.3.0
        gatk VariantsToTable -V {input.vcf} -O {output.table} -F EVENTLENGTH -F TRANSITION -F HET -F HOM-REF -F HOM-VAR -F NO-CALL -F TYPE -F VAR -F NSAMPLES -F NCALLED -F MULTI-ALLELIC -GF DP -GF AD -GF GT
        perl /data/NCBR/apps/make_annotated_table.pl {input.vcf} {output.genotypes} {output.table} {input.vep} {output.merged}"""

##pbsv discover from ccs reads
rule pbsv_ccs_discover:
    input:
        "ccs_reads/{samples}.ccs.fastq"
    output:
        bam="pbsv/ccs/{samples}.sort.bam",
        svdisc="pbsv/ccs/{samples}.svsig.gz"
    params:
        ref = ref_fasta,sample="{samples}",rname="pbsvCCS1"
    shell:
        """mkdir -p pbsv
        mkdir -p pbsv/ccs
        set -eux
        echo "Testing vitualenv"
        set +u
        source /data/NCBR/rawdata/NCBR-56/ccs_bams/conda/bin/activate
        set -u
        pbmm2 align {params.ref} {input} {output.bam} --preset CCS --sort -j 12 --sample {params.sample}
        pbsv discover {output.bam} {output.svdisc}
        """

##pbsv call from ccs reads
rule pbsv_ccs_call:
    input: expand("pbsv/ccs/{samples}.svsig.gz",samples=DATA_SAMPLES)
    output:
        sv="pbsv/ccs/joint.sv.vcf"
    params:
        ref = ref_fasta,rname="pbsvCCS2"
    shell:
        """set -eux
        echo "Testing vitualenv"
        set +u
        source /data/NCBR/rawdata/NCBR-56/ccs_bams/conda/bin/activate
        set -u
        pbsv call --ccs {params.ref} {input} {output.sv}
        """

##pbsv discover from raw reads
rule pbsv_raw_discover:
    input: data_path+"raw_reads/{samples}.bam"
    output:
        bam="pbsv/raw/{samples}.sort.bam",
        svdisc="pbsv/raw/{samples}.svsig.gz"
    params:
        ref = ref_fasta,sample="{samples}",rname="pbsvRAW1"
    shell:
        """mkdir -p pbsv
        mkdir -p pbsv/raw
        set -eux
        echo "Testing vitualenv"
        set +u
        source /data/NCBR/rawdata/NCBR-56/ccs_bams/conda/bin/activate
        set -u
        pbmm2 align {params.ref} {input} {output.bam} --sort -j 12 --sample {params.sample}
        pbsv discover {output.bam} {output.svdisc}
        """

###Qualimap QC on raw subread BAM file
rule qualimap_raw:
    input:
        bam="pbsv/raw/{samples}.sort.bam"
    output:
        "qualimap/{samples}_raw/qualimapReport.html"
    params:
        sample="{samples}",rname="qualimap"
    shell:
        """mkdir -p qualimap
        mkdir -p qualimap/{params.sample}_raw
        module load qualimap/2.2.1
        unset DISPLAY
        qualimap bamqc --java-mem-size=48G -bam {input} -c -outdir qualimap/{params.sample}_raw -sd -nt 12 -outformat HTML -nw 500 -outfile {output}"""


##pbsv call from raw reads
rule pbsv_raw_call:
    input: expand("pbsv/raw/{samples}.svsig.gz",samples=DATA_SAMPLES)
    output:
        sv="pbsv/raw/joint.sv.vcf"
    params:
        ref = ref_fasta,rname="pbsvRAW2"
    shell:
        """set -eux
        echo "Testing vitualenv"
        set +u
        source /data/NCBR/rawdata/NCBR-56/ccs_bams/conda/bin/activate
        set -u
        pbsv call {params.ref} {input} {output.sv}
        """

##pbsv annotate and make table
rule pbsv_raw_table:
    input: vcf="pbsv/raw/joint.sv.vcf"
    output: genotypes="pbsv/raw/joint.sv.genotypes",
        table="pbsv/raw/joint.sv.table",
        vep="pbsv/raw/joint.sv.vep",
        merged="pbsv/raw/joint.sv.annotated.tsv"
    params:
        ref = ref_fasta,gff=gff_file,ids=gene_symbols,desc=gene_descriptions,rname="svannotate"
    shell:
        """
        module load samtools
        bcftools query -f '%CHROM\\t%POS\\t%INFO/END\\t%ID\\t%FILTER\\t%INFO/SVTYPE\\t%INFO/SVLEN[\\t%GT]\\n' {input.vcf} > {output.genotypes}
        module load GATK/4.1.3.0
        gatk VariantsToTable -V {input.vcf} -O {output.table} -F EVENTLENGTH -F TRANSITION -F HET -F HOM-REF -F HOM-VAR -F NO-CALL -F TYPE -F VAR -F NSAMPLES -F NCALLED -F MULTI-ALLELIC -GF DP -GF AD -raw
        module load VEP/96
        vep -sf pbsv/raw/vepstats.html --force_overwrite --fasta {params.ref} --gff {params.gff} --tab -i {input} --format vcf -o {output.vep} --pick --custom {params.ids},geneSymbol,bed,overlap,0 --custom {params.desc},geneDescription,bed,overlap,0
        perl /data/NCBR/apps/make_annotated_sv_table.pl {input.vcf} {output.genotypes} {output.table} {output.vep} {output.merged}
        """